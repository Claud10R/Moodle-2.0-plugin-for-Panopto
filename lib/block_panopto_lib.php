<?php
// Load the server name global setting from the DB.
function get_servername_setting()
{
	$servername = "";
	
	$record = get_config('panopto', 'servername');
	
	if(!empty($record))
	{
		// Moodle is inconsistent between versions on whether get_config returns a record object or scalar.
		if(isset($record->value))
		{
			$servername = $record->value;
		}
		else 
		{
			$servername = $record;
		}
	}
		
	return $servername;	
}

// Load the instance name global setting from the DB.
function get_instancename_setting()
{
	$instancename = "moodle";
	
	$record = get_config('panopto', 'instancename');
	
	if(!empty($record))
	{
		// Moodle is inconsistent between versions on whether get_config returns a record object or scalar.
		if(isset($record->value))
		{
			$instancename = $record->value;
		}
		else 
		{
			$instancename = $record;
		}
	}
		
	return $instancename;	
}

// Load the application key global setting from the DB.
function get_application_key_setting()
{
	$application_key = "";
	
	$record = get_config('panopto', 'applicationkey');
	
	if(!empty($record))
	{
		// Moodle is inconsistent between versions on whether get_config returns a record object or scalar.
		if(isset($record->value))
		{
			$application_key = $record->value;
		}
		else 
		{
			$application_key = $record;
		}
	}
		
	return $application_key;	
}

// Prepend the instance name to the Moodle course ID to create an external ID for Panopto CourseCast.
function decorate_course_id($moodle_course_id)
{
	return (get_instancename_setting() . ":" . $moodle_course_id);
}

// Decorate a moodle username with the instancename outside the context of a panopto_data object.
function decorate_username($moodle_username)
{
	return (get_instancename_setting() . "\\" . $moodle_username); 
}

// Sign the payload with the proof that it was generated by trusted code. 
function generate_auth_code($payload)
{
	$sharedSecret = get_application_key_setting();
	
	$signed_payload = $payload . "|" . $sharedSecret;
	
	$auth_code = sha1($signed_payload);
	$auth_code = strtoupper($auth_code);
	
	return $auth_code;
}

function validate_auth_code($payload, $auth_code)
{
	return (generate_auth_code($payload) == $auth_code);
}
?>